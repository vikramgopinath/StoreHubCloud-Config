############################
## Store Master Job Configuration
 ############################
 
#Job File Name Configuration
storehub.job-file-name=StoreMasterStgDBToFile.xml
 
#Reader Configuration 
	
xhub.storemaster.querytimeout=5400
xhub.storemasterrelate.querytimeout=5400
xhub.storeattribute.querytimeout=5400
xhub.storevaliddestination.querytimeout=5400

## Store															
storeMasterStgDBToStoreMasterFileJob.storeAttributeReader.sql=\
	SELECT ST.TRANSACTION_TYPE,ST.STORE_ID,ST.STG_EVENT_ID,ST.ATTRIBUTE_NAME_VALUE,STC.STORE_ADD1,STC.STORE_ADD2,STC.STORE_CITY,STC.STORE_STATE,STC.STORE_POSTAL_CODE,STC.STORE_COUNTRY_ID,STC.STORE_COUNTY,STC.STORE_NAME,STC.STORE_EMAIL,STC.ORGANIZATION_ID \
	FROM (SELECT \
	    T.STORE_ID,T.TRANSACTION_TYPE,COUNT(*) [COUNT], \
	    STUFF \
	    ( \
	        ( \
	            SELECT \
	                ',' +ATTRIBUTE_NAME+'^'+ATTRIBUTE_VALUE \
	            FROM \
	                (SELECT * FROM (SELECT STATT.TRANSACTION_TYPE,VALID.STORE_ID,STATT.ATTRIBUTE_NAME,'' AS ATTRIBUTE_VALUE,STATT.STG_EVENT_ID \
						FROM XHUB_STG_STORE_ATTRIBUTE STATT,XHUB_STG_VALID_DESTN_CACHE VALID \
						WHERE STATT.STORE_ID = 0 AND STATT.TRANSACTION_TYPE = 2 \
						AND STATT.STORE_ID != VALID.STORE_ID \
						AND ((STATT.STG_RELATE_PROCESS_DATE IS NULL AND STATT.STG_RELATE_STATUS='0') \
						OR (STATT.STG_RELATE_PROCESS_DATE IS NOT NULL AND STATT.STG_RELATE_STATUS='2')) \
						UNION \
						SELECT TRANSACTION_TYPE,STORE_ID,ATTRIBUTE_NAME,ATTRIBUTE_VALUE AS ATTRIBUTE_NAME_VALUE,STG_EVENT_ID \
						FROM  XHUB_STG_STORE_ATTRIBUTE \
						WHERE STORE_ID != 0 AND ((STG_RELATE_PROCESS_DATE IS NULL AND STG_RELATE_STATUS='0') \
						OR (STG_RELATE_PROCESS_DATE IS NOT NULL AND STG_RELATE_STATUS='2'))) AS STORE_ATTRIBTE) T2 \
	            WHERE \
	                T2.STORE_ID=T.STORE_ID AND \
					T2.TRANSACTION_TYPE=T.TRANSACTION_TYPE \
	            FOR XML PATH('') \
	        ) \
	    ,1,1,'') AS ATTRIBUTE_NAME_VALUE, \
		STUFF \
	    ( \
	        ( \
	            SELECT \
	                ',' +CAST(STG_EVENT_ID AS VARCHAR(1000)) \
	            FROM \
	                (SELECT * FROM (SELECT STATT.TRANSACTION_TYPE,VALID.STORE_ID,STATT.ATTRIBUTE_NAME,'' AS ATTRIBUTE_VALUE,STATT.STG_EVENT_ID \
						FROM XHUB_STG_STORE_ATTRIBUTE STATT,XHUB_STG_VALID_DESTN_CACHE VALID \
						WHERE STATT.STORE_ID = 0 AND STATT.TRANSACTION_TYPE = 2 \
						AND STATT.STORE_ID != VALID.STORE_ID \
						AND ((STATT.STG_RELATE_PROCESS_DATE IS NULL AND STATT.STG_RELATE_STATUS='0') \
						OR (STATT.STG_RELATE_PROCESS_DATE IS NOT NULL AND STATT.STG_RELATE_STATUS='2')) \
						UNION \
						SELECT TRANSACTION_TYPE,STORE_ID,ATTRIBUTE_NAME,ATTRIBUTE_VALUE AS ATTRIBUTE_NAME_VALUE,STG_EVENT_ID \
						FROM  XHUB_STG_STORE_ATTRIBUTE \
						WHERE STORE_ID != 0 AND ((STG_RELATE_PROCESS_DATE IS NULL AND STG_RELATE_STATUS='0') \
						OR (STG_RELATE_PROCESS_DATE IS NOT NULL AND STG_RELATE_STATUS='2'))) AS STORE_ATTRIBTE) T2 \
	            WHERE \
	                T2.STORE_ID=T.STORE_ID AND \
					T2.TRANSACTION_TYPE=T.TRANSACTION_TYPE \
	            FOR XML PATH('') \
	        ) \
	    ,1,1,'') AS STG_EVENT_ID \
	FROM (SELECT * FROM (SELECT STATT.TRANSACTION_TYPE,VALID.STORE_ID,STATT.ATTRIBUTE_NAME,'' AS ATTRIBUTE_VALUE,STATT.STG_EVENT_ID \
						FROM XHUB_STG_STORE_ATTRIBUTE STATT,XHUB_STG_VALID_DESTN_CACHE VALID \
						WHERE STATT.STORE_ID = 0 AND STATT.TRANSACTION_TYPE = 2 \
						AND STATT.STORE_ID != VALID.STORE_ID \
						AND ((STATT.STG_RELATE_PROCESS_DATE IS NULL AND STATT.STG_RELATE_STATUS='0') \
						OR (STATT.STG_RELATE_PROCESS_DATE IS NOT NULL AND STATT.STG_RELATE_STATUS='2')) \
						UNION \
						SELECT TRANSACTION_TYPE,STORE_ID,ATTRIBUTE_NAME,ATTRIBUTE_VALUE AS ATTRIBUTE_NAME_VALUE,STG_EVENT_ID \
						FROM  XHUB_STG_STORE_ATTRIBUTE \
						WHERE STORE_ID != 0 AND ((STG_RELATE_PROCESS_DATE IS NULL AND STG_RELATE_STATUS='0') \
						OR (STG_RELATE_PROCESS_DATE IS NOT NULL AND STG_RELATE_STATUS='2'))) AS STORE_ATTRIBTE) T \
	GROUP BY T.STORE_ID,T.TRANSACTION_TYPE) ST LEFT JOIN XHUB_STG_VALID_DESTN_CACHE STC \
						ON ST.STORE_ID = STC.STORE_ID WHERE ORGANIZATION_ID=? \
	ORDER BY ST.TRANSACTION_TYPE DESC,ST.STORE_ID, ST.STG_EVENT_ID ASC
															
storeMasterStgDBToStoreMasterFileJob.storeMasterSimReader.sql=\
	SELECT MESSAGE_TYPE ,TRANSACTION_TYPE, \
		dbo.retreivestoreid(STORE_ID, ORGANIZATION_ID, SUBINVENTORY_CODE) STORE_ID ,ORGANIZATION_ID, \
		SUBINVENTORY_CODE,STORE_NAME,STORE_TYPE,STORE_ADD1,STORE_ADD2,STORE_CITY,STORE_STATE,STORE_COUNTRY_ID,\
		STORE_POSTAL_CODE,STORE_OPEN_DATE,STORE_CLOSE_DATE,STORE_FAX,STORE_PHONE_NUM,STORE_EMAIL,TOTAL_SQUARE_FT, \
		SELLING_SQUARE_FT,STOCKHOLDING_LOC_IND,TRANSFER_ZONE,CURRENCY_CODE,\
		isnull(dbo.getLookupVal('LANG_ID', STORE_LANGUAGE_ID), STORE_LANGUAGE_ID) STORE_LANGUAGE_ID,\
		dbo.getLookupVal('TZNAME', TIMEZONE_NAME) TIMEZONE_NAME,STG_EVENT_ID,STG_SIM_STATUS,STG_SIM_ERROR_MESSAGE,\
		STG_LOAD_DATE,STG_SIM_PROCESS_DATE \
	FROM XHUB_STG_STORE \
	WHERE ((STG_SIM_PROCESS_DATE IS NULL AND STG_SIM_STATUS = '0') \
			OR (STG_SIM_PROCESS_DATE IS NOT NULL AND STG_SIM_STATUS = '2')) 
																	
storeMasterStgDBToStoreMasterFileJob.storeValidDestinationDBReader.sql=\
	SELECT 'INSERT' AS ACTION_CODE, 'INV_VALID_DESTINATIONS'AS RECORD_TYPE, INVDOCTYPE.INVDOCTYPE, INVDOCTYPE.INVDOCSUBTYPE, \
	STORE.STORE_ID AS SOURCE_STORE_ID, 'RETAIL_LOCATION' AS DESTINATION_TYPE, VALID_DEST.STORE_ID AS DESTINATION_STORE_ID,  VALID_DEST.STORE_NAME, STORE.ORGANIZATION_ID \
	FROM XHUB_STG_VALID_DESTN_CACHE STORE, XHUB_STG_VALID_DESTN_CACHE VALID_DEST, \
	(SELECT INVDOCTYPE.[LKUP_VAL] AS INVDOCTYPE, INVDOCSUBTYPE.[LKUP_VAL]  AS INVDOCSUBTYPE FROM [XHUB_EBIZ_LOOKUP] INVDOCTYPE, [XHUB_EBIZ_LOOKUP] INVDOCSUBTYPE \
	WHERE INVDOCTYPE.[LKUP_TYPE]='INV_DOC_TYPE' AND INVDOCSUBTYPE.[LKUP_TYPE]='INV_DOC_SUB_TYPE' \
	AND INVDOCTYPE.[LKUP_CD]=INVDOCSUBTYPE.[LKUP_CD]) INVDOCTYPE \
	WHERE STORE.STORE_CLOSE_DATE IS NULL \
	AND VALID_DEST.STORE_CLOSE_DATE IS NULL \
	AND STORE.PROCESSED = 'N' \
	AND STORE.VALID_STORE_TYPE = 'STORE' \
	AND VALID_DEST.VALID_STORE_TYPE = 'STORE' \
	AND VALID_DEST.STORE_ID != STORE.STORE_ID \
	AND  STORE.STORE_STATE NOT IN (SELECT * FROM GETINVALIDSTORELIST()) \
	AND  STORE.STORE_ID NOT IN (SELECT * FROM GETINVALIDSTORELIST()) \
	AND  VALID_DEST.STORE_STATE NOT IN (SELECT * FROM GETINVALIDSTORELIST()) \
	AND  VALID_DEST.STORE_ID NOT IN (SELECT * FROM GETINVALIDSTORELIST()) \
	AND INVDOCSUBTYPE NOT IN ('RETURN_TO_VENDOR','DEFECTIVE_RETURN') \
	UNION \
	SELECT 'INSERT' AS ACTION_CODE, 'INV_VALID_DESTINATIONS'AS RECORD_TYPE, INVDOCTYPE.INVDOCTYPE, INVDOCTYPE.INVDOCSUBTYPE, \
	VALID_DEST.STORE_ID AS SOURCE_STORE_ID, 'PARTY' AS DESTINATION_TYPE, STORE.STORE_ID AS DESTINATION_STORE_ID, STORE.STORE_NAME, STORE.ORGANIZATION_ID \
	FROM XHUB_STG_VALID_DESTN_CACHE STORE, XHUB_STG_VALID_DESTN_CACHE VALID_DEST, \
	(SELECT INVDOCTYPE.[LKUP_VAL] AS INVDOCTYPE, INVDOCSUBTYPE.[LKUP_VAL]  AS INVDOCSUBTYPE FROM [XHUB_EBIZ_LOOKUP] INVDOCTYPE, [XHUB_EBIZ_LOOKUP] INVDOCSUBTYPE \
	WHERE INVDOCTYPE.[LKUP_TYPE]='INV_DOC_TYPE' AND INVDOCSUBTYPE.[LKUP_TYPE]='INV_DOC_SUB_TYPE' \
	AND INVDOCTYPE.[LKUP_CD]=INVDOCSUBTYPE.[LKUP_CD]) INVDOCTYPE \
	WHERE STORE.STORE_CLOSE_DATE IS NULL \
	AND VALID_DEST.STORE_CLOSE_DATE IS NULL \
	AND STORE.PROCESSED = 'N' \
	AND STORE.VALID_STORE_TYPE = 'VENDOR' \
	AND VALID_DEST.VALID_STORE_TYPE != 'VENDOR' \
	AND VALID_DEST.STORE_ID != STORE.STORE_ID \
	AND  STORE.STORE_STATE NOT IN (SELECT * FROM GETINVALIDSTORELIST()) \
	AND  STORE.STORE_ID NOT IN (SELECT * FROM GETINVALIDSTORELIST()) \
	AND  VALID_DEST.STORE_STATE NOT IN (SELECT * FROM GETINVALIDSTORELIST()) \
	AND  VALID_DEST.STORE_ID NOT IN (SELECT * FROM GETINVALIDSTORELIST()) \
	AND INVDOCSUBTYPE IN ('RETURN_TO_VENDOR','DEFECTIVE_RETURN') \
	UNION \
	SELECT 'INSERT' AS ACTION_CODE, 'INV_VALID_DESTINATIONS'AS RECORD_TYPE, INVDOCTYPE.INVDOCTYPE, INVDOCTYPE.INVDOCSUBTYPE, \
	STORE.STORE_ID AS     SOURCE_STORE_ID, 'RETAIL_LOCATION' AS DESTINATION_TYPE, VALID_DEST.STORE_ID AS DESTINATION_STORE_ID,  VALID_DEST.STORE_NAME, STORE.ORGANIZATION_ID \
	FROM XHUB_STG_VALID_DESTN_CACHE STORE, XHUB_STG_VALID_DESTN_CACHE VALID_DEST, \
	(SELECT INVDOCTYPE.[LKUP_VAL] AS INVDOCTYPE, INVDOCSUBTYPE.[LKUP_VAL]  AS INVDOCSUBTYPE FROM [XHUB_EBIZ_LOOKUP] INVDOCTYPE, [XHUB_EBIZ_LOOKUP] INVDOCSUBTYPE \
	WHERE INVDOCTYPE.[LKUP_TYPE]='INV_DOC_TYPE' AND INVDOCSUBTYPE.[LKUP_TYPE]='INV_DOC_SUB_TYPE' \
	AND INVDOCTYPE.[LKUP_CD]=INVDOCSUBTYPE.[LKUP_CD]) INVDOCTYPE \
	WHERE STORE.STORE_CLOSE_DATE IS NULL \
	AND VALID_DEST.STORE_CLOSE_DATE IS NULL \
	AND STORE.PROCESSED = 'N' \
	AND STORE.VALID_STORE_TYPE = 'STORE' \
	AND VALID_DEST.VALID_STORE_TYPE = 'STORE' \
	AND VALID_DEST.STORE_ID != STORE.STORE_ID \
	AND  VALID_DEST.STORE_ID NOT IN (SELECT * FROM GETINVALIDSTORELIST()) \
	AND STORE.STORE_ID in (select STORE_ID from XHUB_STG_VALID_DESTN_CACHE WHERE STORE_STATE IN (SELECT * FROM GETINVALIDSTORELIST())) \
	AND INVDOCTYPE = 'RECEIVING' \
	ORDER BY STORE.STORE_ID,VALID_DEST.STORE_ID;
		
storeMasterStgDBToStoreMasterFileJob.storeValidDestinationDBReader.sql=\
	SELECT 'INSERT' AS ACTION_CODE, 'INV_VALID_DESTINATIONS'AS RECORD_TYPE, INVDOCTYPE.INVDOCTYPE, INVDOCTYPE.INVDOCSUBTYPE, \
	STORE.STORE_ID AS     SOURCE_STORE_ID, 'RETAIL_LOCATION' AS DESTINATION_TYPE, VALID_DEST.STORE_ID AS DESTINATION_STORE_ID,  VALID_DEST.STORE_NAME, STORE.ORGANIZATION_ID \
	FROM XHUB_STG_VALID_DESTN_CACHE STORE, XHUB_STG_VALID_DESTN_CACHE VALID_DEST, \
	(SELECT INVDOCTYPE.[LKUP_VAL] AS INVDOCTYPE, INVDOCSUBTYPE.[LKUP_VAL]  AS INVDOCSUBTYPE FROM [XHUB_EBIZ_LOOKUP] INVDOCTYPE, [XHUB_EBIZ_LOOKUP] INVDOCSUBTYPE \
	WHERE INVDOCTYPE.[LKUP_TYPE]='INV_DOC_TYPE' AND INVDOCSUBTYPE.[LKUP_TYPE]='INV_DOC_SUB_TYPE' \
	AND INVDOCTYPE.[LKUP_CD]=INVDOCSUBTYPE.[LKUP_CD]) INVDOCTYPE \
	WHERE STORE.STORE_CLOSE_DATE IS NULL \
	AND VALID_DEST.STORE_CLOSE_DATE IS NULL \
	AND STORE.PROCESSED = 'N' \
	AND STORE.VALID_STORE_TYPE = 'STORE' \
	AND VALID_DEST.VALID_STORE_TYPE = 'STORE' \
	AND VALID_DEST.STORE_ID != STORE.STORE_ID \
	AND  STORE.STORE_STATE NOT IN (SELECT * FROM GETINVALIDSTORELIST()) \
	AND  STORE.STORE_ID NOT IN (SELECT * FROM GETINVALIDSTORELIST()) \
	AND  VALID_DEST.STORE_STATE NOT IN (SELECT * FROM GETINVALIDSTORELIST()) \
	AND  VALID_DEST.STORE_ID NOT IN (SELECT * FROM GETINVALIDSTORELIST()) \
	AND INVDOCSUBTYPE NOT IN ('RETURN_TO_VENDOR','DEFECTIVE_RETURN') \
	UNION \
	SELECT 'INSERT' AS ACTION_CODE, 'INV_VALID_DESTINATIONS'AS RECORD_TYPE, INVDOCTYPE.INVDOCTYPE, INVDOCTYPE.INVDOCSUBTYPE, \
	VALID_DEST.STORE_ID AS     SOURCE_STORE_ID, 'PARTY' AS DESTINATION_TYPE, STORE.STORE_ID AS DESTINATION_STORE_ID,  STORE.STORE_NAME, STORE.ORGANIZATION_ID \
	FROM XHUB_STG_VALID_DESTN_CACHE STORE, XHUB_STG_VALID_DESTN_CACHE VALID_DEST, \
	(SELECT INVDOCTYPE.[LKUP_VAL] AS INVDOCTYPE, INVDOCSUBTYPE.[LKUP_VAL]  AS INVDOCSUBTYPE FROM [XHUB_EBIZ_LOOKUP] INVDOCTYPE, [XHUB_EBIZ_LOOKUP] INVDOCSUBTYPE \
	WHERE INVDOCTYPE.[LKUP_TYPE]='INV_DOC_TYPE' AND INVDOCSUBTYPE.[LKUP_TYPE]='INV_DOC_SUB_TYPE' \
	AND INVDOCTYPE.[LKUP_CD]=INVDOCSUBTYPE.[LKUP_CD]) INVDOCTYPE \
	WHERE STORE.STORE_CLOSE_DATE IS NULL \
	AND VALID_DEST.STORE_CLOSE_DATE IS NULL \
	AND STORE.PROCESSED = 'N' \
	AND STORE.VALID_STORE_TYPE = 'VENDOR' \
	AND VALID_DEST.VALID_STORE_TYPE != 'VENDOR' \
	AND VALID_DEST.STORE_ID != STORE.STORE_ID \
	AND  STORE.STORE_STATE NOT IN (SELECT * FROM GETINVALIDSTORELIST()) \
	AND  STORE.STORE_ID NOT IN (SELECT * FROM GETINVALIDSTORELIST()) \
	AND  VALID_DEST.STORE_STATE NOT IN (SELECT * FROM GETINVALIDSTORELIST()) \
	AND  VALID_DEST.STORE_ID NOT IN (SELECT * FROM GETINVALIDSTORELIST()) \
	AND INVDOCSUBTYPE IN ('RETURN_TO_VENDOR','DEFECTIVE_RETURN') \
	UNION \
	SELECT 'INSERT' AS ACTION_CODE, 'INV_VALID_DESTINATIONS'AS RECORD_TYPE, INVDOCTYPE.INVDOCTYPE, INVDOCTYPE.INVDOCSUBTYPE, \
	STORE.STORE_ID AS     SOURCE_STORE_ID, 'RETAIL_LOCATION' AS DESTINATION_TYPE, VALID_DEST.STORE_ID AS DESTINATION_STORE_ID,  VALID_DEST.STORE_NAME, STORE.ORGANIZATION_ID \
	FROM XHUB_STG_VALID_DESTN_CACHE STORE, XHUB_STG_VALID_DESTN_CACHE VALID_DEST, \
	(SELECT INVDOCTYPE.[LKUP_VAL] AS INVDOCTYPE, INVDOCSUBTYPE.[LKUP_VAL]  AS INVDOCSUBTYPE FROM [XHUB_EBIZ_LOOKUP] INVDOCTYPE, [XHUB_EBIZ_LOOKUP] INVDOCSUBTYPE \
	WHERE INVDOCTYPE.[LKUP_TYPE]='INV_DOC_TYPE' AND INVDOCSUBTYPE.[LKUP_TYPE]='INV_DOC_SUB_TYPE' \
	AND INVDOCTYPE.[LKUP_CD]=INVDOCSUBTYPE.[LKUP_CD]) INVDOCTYPE \
	WHERE STORE.STORE_CLOSE_DATE IS NULL \
	AND VALID_DEST.STORE_CLOSE_DATE IS NULL \
	AND STORE.PROCESSED = 'N' \
	AND STORE.VALID_STORE_TYPE = 'STORE' \
	AND VALID_DEST.VALID_STORE_TYPE = 'STORE' \
	AND VALID_DEST.STORE_ID != STORE.STORE_ID \
	AND  VALID_DEST.STORE_ID NOT IN (SELECT * FROM GETINVALIDSTORELIST()) \
	AND STORE.STORE_ID in (select STORE_ID from XHUB_STG_VALID_DESTN_CACHE WHERE STORE_STATE IN (SELECT * FROM GETINVALIDSTORELIST())) \
	AND INVDOCTYPE = 'RECEIVING' \
	ORDER BY STORE.STORE_ID,VALID_DEST.STORE_ID;

## ANSI	
storeMasterStgDBToStoreMasterFileJob.xstoreStorePartitioner.sql=\
	(SELECT ORGANIZATION_ID,ORG_CD,ORG_VALUE,STG_POS_PROCESS_DATE,STG_POS_STATUS \
	FROM XHUB_STG_STORE \
	GROUP BY ORGANIZATION_ID,ORG_CD,ORG_VALUE,STG_POS_PROCESS_DATE,STG_POS_STATUS) STG_STORE

## ANSI	
storeMasterStgDBToStoreMasterFileJob.storeMasterDBReader.sql=\
	SELECT CURRENCY_CODE,DEFAULT_TAX_PER,DEP_BANK_ACC_NBR,DEP_BANK_NAME,DESCRIPTION,DISTRICT_NAME,FL_DELIVERY_AVL,FL_PICKUP_AVL,FL_TRANSFER_AVL,FL_UEZINDICATOR, \
	GEOCODE,LATITUDE,LONGITUDE,MESSAGE_TYPE,ORGANIZATION_ID,REGION_ID,REGION_NAME,STORE_ADD1,STORE_ADD2,STORE_CITY,STORE_COUNTRY_ID,STORE_COUNTY,STORE_EMAIL,STORE_ID, \
	STORE_LANGUAGE_ID,STORE_MGR,STORE_NAME,STORE_PHONE_NUM,STORE_POSTAL_CODE,STORE_STATE,STORE_TYPE,TRANSACTION_TYPE,TRANSFER_ZONE,FL_USE_TILL_ACC_MODE,NEIGHBORHOOD, COUNTY,STG_EVENT_ID \
	FROM XHUB_STG_STORE \
	WHERE (((STG_POS_PROCESS_DATE is NULL AND STG_POS_STATUS='0') or (STG_POS_PROCESS_DATE IS NOT NULL AND STG_POS_STATUS='2')) AND 'FORPOS'=? AND ORGANIZATION_ID=? AND ORG_CD=? AND ORG_VALUE=?) \
	OR (((STG_RELATE_PROCESS_DATE IS NULL AND STG_RELATE_STATUS='0') or (STG_RELATE_PROCESS_DATE IS NOT NULL AND STG_RELATE_STATUS='2')) AND IS_WAREHOUSE = 'N' AND 'FORRELATE'=? AND MESSAGE_TYPE='0') \
	OR (((STG_LOCATE_PROCESS_DATE IS NULL AND STG_LOCATE_STATUS='0') or (STG_LOCATE_PROCESS_DATE IS NOT NULL AND STG_LOCATE_STATUS='2')) AND 'FORLOCATE'=?) ORDER BY STG_EVENT_ID
	
## ANSI
storeMasterStgDBToStoreMasterFileJob.storeMasterRelateReader.sql=\
	SELECT MESSAGE_TYPE,CURRENCY_CODE,DEFAULT_TAX_PER,DEP_BANK_ACC_NBR,DEP_BANK_NAME,DESCRIPTION,DISTRICT_NAME,FL_DELIVERY_AVL,FL_PICKUP_AVL,FL_TRANSFER_AVL,FL_UEZINDICATOR, \
		GEOCODE,LATITUDE,LONGITUDE,MESSAGE_TYPE,ORGANIZATION_ID,REGION_ID,REGION_NAME,STORE_ADD1,STORE_ADD2,STORE_CITY,STORE_COUNTRY_ID,STORE_COUNTY,STORE_EMAIL,STORE_ID,\
		STORE_LANGUAGE_ID,STORE_MGR,STORE_NAME,STORE_PHONE_NUM,STORE_POSTAL_CODE,STORE_STATE,STORE_TYPE,TRANSACTION_TYPE,TRANSFER_ZONE,FL_USE_TILL_ACC_MODE,STG_EVENT_ID \
	FROM XHUB_STG_STORE \
	WHERE (STG_RELATE_PROCESS_DATE IS NULL AND STG_RELATE_STATUS='0') or (STG_RELATE_PROCESS_DATE IS NOT NULL AND STG_RELATE_STATUS='2') \
		AND IS_WAREHOUSE = 'N' AND MESSAGE_TYPE='0' AND ORGANIZATION_ID=? \
	ORDER BY STG_EVENT_ID			

## Store valid destination	
storeValidDestinationFeedJob.storeValidDestinationDBReader.sql=\
	select 'INSERT' as ACTION_CODE, 'INV_VALID_DESTINATIONS'as RECORD_TYPE, INVDOCTYPE.INVDOCTYPE, INVDOCTYPE.INVDOCSUBTYPE,store.STORE_ID as SOURCE_STORE_ID, 'RETAIL_LOCATION' AS DESTINATION_TYPE, valid_dest.STORE_ID as DESTINATION_STORE_ID, store.STORE_NAME, store.ORGANIZATION_ID \
	from XHUB_STG_VAILD_DESTN_CACHE store, XHUB_STG_VAILD_DESTN_CACHE valid_dest, \
	(SELECT INVDOCTYPE.[LKUP_VAL] AS INVDOCTYPE, INVDOCSUBTYPE.[LKUP_VAL]  AS INVDOCSUBTYPE FROM [XHUB_EBIZ_LOOKUP] INVDOCTYPE, [XHUB_EBIZ_LOOKUP] INVDOCSUBTYPE \
	WHERE INVDOCTYPE.[LKUP_TYPE]='INV_DOC_TYPE' AND INVDOCSUBTYPE.[LKUP_TYPE]='INV_DOC_SUB_TYPE'AND INVDOCTYPE.[LKUP_CD]=INVDOCSUBTYPE.[LKUP_CD]) INVDOCTYPE \
	WHERE store.STORE_CLOSE_DATE is null \
	and valid_dest.STORE_CLOSE_DATE is null \
	and store.PROCESSED = 'N' \
	and valid_dest.STORE_ID != store.STORE_ID \
	order by store.STORE_ID,valid_dest.STORE_ID;
	

# Writer Configuration	
xhub.storeMaster.fileprefix=storelocation-master
xhub.storeAttribute.xmlfileprefix=storelocation-attribute


# Dao Class Configuration
# Store
storeMasterStgDBToStoreMasterFileJob.xhubStoreMasterDao.class=com.skillnet.retail.xhub.dao.mssql.StoreMasterMssqlImpDao

# Store Attribute
storeMasterStgDBToStoreMasterFileJob.xhubStoreMasterAttributeDao.class=com.skillnet.retail.xhub.dao.mssql.StoreAttributeMssqlImpDao

# Store Valid Destination (also used in store. common implementation. no db vendor specific queries)
storeValidDestinationFeedJob.storeValidDestinationDao.class=com.skillnet.retail.xhub.dao.StoreValidDestinationImpDao

